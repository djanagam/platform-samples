As of my last update, both the Z Garbage Collector (ZGC) and the Garbage-First Garbage Collector (G1 GC) have undergone various improvements. Here are some of the major improvements for each:

Z Garbage Collector (ZGC):
1. Concurrent marking: ZGC performs concurrent marking, reducing pause times by allowing garbage collection work to be done concurrently with the application threads.
2. Concurrent relocation: ZGC relocates objects concurrently with the application threads, minimizing pause times for heap operations.
3. Scalability: ZGC is designed to handle heaps ranging from relatively small to extremely large (multi-terabyte) with low latency and high throughput.
4. Low-latency operation: ZGC aims to keep pause times consistently low, even as heap sizes increase.
5. Reduced fragmentation: ZGC attempts to minimize heap fragmentation, which can improve overall performance and reduce the likelihood of fragmentation-related issues.

G1 Garbage Collector (G1 GC):
1. Region-based memory management: G1 GC divides the heap into regions and collects them incrementally, reducing pause times by focusing garbage collection efforts on specific regions rather than the entire heap.
2. Predictable pause times: G1 GC aims to provide more predictable pause times compared to other collectors like the Parallel GC by using techniques such as adaptive sizing and pause prediction.
3. Improved heap compaction: G1 GC includes improved heap compaction algorithms to reduce fragmentation and improve memory utilization.
4. Ergonomics: G1 GC includes adaptive sizing policies to automatically adjust heap sizes based on application behavior and performance goals.
5. Concurrent marking: Similar to ZGC, G1 GC also performs concurrent marking to reduce pause times by allowing marking work to be done concurrently with the application threads.

Both collectors have been subject to ongoing improvements and optimizations in subsequent Java releases, so it's essential to consult the most recent documentation or release notes for the latest updates and improvements.